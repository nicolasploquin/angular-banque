{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.module.ts","webpack:///./src/app/authentification/auth-model.ts","webpack:///./src/app/authentification/authentification.component.html","webpack:///./src/app/authentification/authentification.component.ts","webpack:///./src/app/client-form/client-form.component.html","webpack:///./src/app/client-form/client-form.component.ts","webpack:///./src/app/client/client.component.html","webpack:///./src/app/client/client.component.ts","webpack:///./src/app/clients/clients.component.html","webpack:///./src/app/clients/clients.component.ts","webpack:///./src/app/material.module.ts","webpack:///./src/app/model/client.ts","webpack:///./src/app/pipes/capitalize.pipe.ts","webpack:///./src/app/root/root.component.html","webpack:///./src/app/root/root.component.ts","webpack:///./src/app/services/banque-http.service.ts","webpack:///./src/app/services/banque-local-async.service.ts","webpack:///./src/app/services/banque-local.service.ts","webpack:///./src/app/services/banque-rest.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUA;AAAA,sCAAsC;AAEtC;IAAA;IA2ByB,CAAC;IAAD,gBAAC;AAAD,CAAC;;;;;;;;;;;;;;;ACnD1B;AAAA;IACE,mBACS,WAAmB,EACnB,UAAkB;QADlB,gBAAW,GAAX,WAAW,CAAQ;QACnB,eAAU,GAAV,UAAU,CAAQ;IACxB,CAAC;IACN,gBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+GCLD;;;;;wBAA+C;MAAzC;;wBAAqB;MAA3B,kxBAA+C,IAC7C,y6EAAgB,MACd;;;;;;;;;;;;;;;;;;;;wBAAsG;MAAzC;;wBAA+B;MAA5F,ovFAAsG,KAExG,g7EAAgB,MACd;;;;;;;;;;;;;;;;;;;;wBAAqG;MAAxC;;wBAA8B;MAA3F,ovFAAqG,KAEvG,+6BAAoF,urBAAU,6EAAI,mDALH,mBAAQ,EAArG,aAAsG,EAAT,UAAQ,GAArF,8BAAkB,EAA2B,oBAA+B,oBAA5F,aAAsG,EAAtF,UAAkB,EAA2B,UAA+B,GAAzD,8BAAyB,EAAiC,mBAAQ,EAArG,aAAsG,EAAnE,UAAyB,EAAiC,UAAQ,GAGT,mBAAQ,EAApG,aAAqG,EAAT,UAAQ,GAApF,6BAAiB,EAA4B,oBAA8B,mBAA3F,aAAqG,EAArF,UAAiB,EAA4B,UAA8B,GAAzD,+BAA0B,EAAgC,mBAAQ,EAApG,aAAqG,EAAnE,UAA0B,EAAgC,UAAQ,GAEpD,0EAAiC,cAA9D,yBAAc,EAAnC,aAAoF,EAAlC,UAAiC,EAA9D,UAAc,GAAiD,aAAU,2BAPhG,8sBAA+C,GAC7C,2xEAAgB,IACd,ouDAAsG,IAExG,uzEAAgB,IACd,ouDAAqG,IAEvG,wPAAoF,gHAAU;;;;;;;;;;;;;;;;;;;;ACPnB;AACtC;AAEvC;IAeE;QAJA,SAAI,GAAyB,IAAI,0DAAY,EAAU,CAAC;IAIxC,CAAC;IAEjB,4CAAQ,GAAR;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,qDAAS,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IACnD,CAAC;IACD,4CAAQ,GAAR;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,EAAE;eAC5B,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACzC,CAAC;IACH,CAAC;IAmBH,gCAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yGC/CD,sHAAI,2FAAc,MAClB;;;;;wBAAoD;MAA9C;;wBAAwB;MAA9B,oxBAAoD,IAClD,6IAAuB,gFAAG,MAC1B;;;;;;;;;;;wBAEE;MAF4D;;wBAAwB;MAAtF,6zDAEE,IAEF,uHAAK,KACL,iJAA2B,wFAAM,MACjC;;;;;;;;;;;wBAAmH;MAArD;;wBAA2B;MAAzF,6zDAAmH,IACnH,uIAAmC,8HAA4C,MAC/E,uHAAK,KACL,6JAAsD,wFAAW,mDATZ,mBAAQ,EAA7D,aAEE,EAFmD,UAAQ,GAAnB,sBAAU,EAAU,oBAAwB,aAAtF,aAEE,EAFwC,UAAU,EAAU,UAAwB,GAMI,+BAAsB,EAAhH,aAAmH,EAAzB,UAAsB,GAAhE,yBAAa,EAAC,oBAA2B,gBAAzF,aAAmH,EAAnE,UAAa,EAAC,UAA2B,2BAR3F,8sBAAoD,GAGhD,mGAAsC,GADxC,ivBAEE,EADA,SAAsC,EADxC,4FAEE,GAIF,m5BAAmH,GAC7G,0EAA4B,SAAlC,aAAmC,EAA7B,UAA4B,GAEZ,yEAA+B,WAArD,aAAsD,EAAhC,UAA+B;;;;;;;;;;;;;;;;;;;;;;ACZL;AACT;AACA;AAGyB;AAElE;IAYE,6BAAY,WAA8B,EAAE,MAAc;QAF1D,WAAM,GAAG,IAAI,oDAAM,EAAE,CAAC;QAGpB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,yCAAW,GAAX;QAAA,iBAMC;QALC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAC1C,cAAM,YAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,EAAlC,CAAkC;QACxC,oDAAoD;SACrD,CAAC;QACF,sCAAsC;IACxC,CAAC;IAED,sCAAQ,GAAR;IAEA,CAAC;IAEH,0BAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qGChCG,wHAA+E,2NAE/E;qGAEE,wHAAM,mGAAiB;qGAN3B;;;;;;qrBAAkD,qFAEhD,saAA+E,IAG/E,uHAA2B,0BAHrB,4KAAuE,GAA7E,YAA+E,EAAzE,oBAAuE,2BAF/E,wMAAkD,iIAEhD;iWAJJ,sHAAI,2MAAyD,IAC7D,yfAAW,IACT,8cAAkD,iDAAnC,mBAAkC,iBAAjD,YAAkD,EAAnC,SAAkC,mDAF/C,qXAAyD;;;;;;;;;;;;;;;;;;;;;;ACAX;AACK;AAChB;AAG2B;AAElE;IAYE,yBAAY,WAA8B,EAAE,KAAqB;QAFjE,WAAM,GAAW,IAAI,oDAAM,EAAE,CAAC;QAG5B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,kCAAQ,GAAR;QAAA,iBAKC;QAJC,IAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC;aAC3B,IAAI,CAAE,gBAAM,IAAI,YAAI,CAAC,MAAM,GAAG,MAAM,EAApB,CAAoB,CAAE,CAAC;QAC1C,gDAAgD;IAClD,CAAC;IAEH,sBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGC3BG,wHAAqD,+MAAiC;sGAFxF;;;;;;;;;wmBAA8F,GAA7E,uDAAiC,GAAlD,2bAA8F,iNAE5F,2YAAqD,yBAFtC,2CAAiC,wBAAlD,YAA8F,EAA7E,SAAiC,GAE1C,0FAA8C,IAApD,aAAqD,EAA/C,SAA8C,2BAFtD,gYAA8F,0ZAE5F;0VAJJ,sHAA8B,KAA9B,iFAAS,MACT,kiBAAc,IACZ,+cAA8F,GAA3C,wUAAyC,IAA5F,YAA8F,EAA3C,SAAyC;;;;;;;;;;;;;;;;;;;;;ACF/B;AAER;AAEW;AAKlE;IAkBE,0BAAY,WAA8B;QAT1C,kBAAkB;QAClB,qBAAqB;QACrB,0BAA0B;QAC1B,YAAO,GAAa,EAAE,CAAC;QAIvB,UAAK,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAGnE,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,CAAC;IAGD,mCAAQ,GAAR;QAAA,iBAGC;QAFC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,IAAI,CAAE,cAAI,IAAI,YAAI,CAAC,OAAO,GAAG,IAAI,EAAnB,CAAmB,CAAE,CAAC;IACpE,CAAC;IAED,4DAA4D;IAC5D,0CAAe,GAAf;QACE,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAC3C,CAAC;IAEH,uBAAC;AAAD,CAAC;;;;;;;;;;;;;;;ACxCD;AAAA;IAAA;IAqB8B,CAAC;IAAD,qBAAC;AAAD,CAAC;;;;;;;;;;;;;;;ACtB/B;AAAA;IAQE;QALA,QAAG,GAAG,EAAE,CAAC;QACT,WAAM,GAAG,EAAE,CAAC;QAEZ,YAAO,GAAa,EAAE,CAAC;IAGvB,CAAC;IAKH,aAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;AChBmD;AAEpD;IAAA;IAcA,CAAC;IATC,kCAAS,GAAT,UAAU,KAAa;QACrB,MAAM,CAAC,KAAK;aACT,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAE,gBAAM;YACV,aAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;kBAC5B,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;QADnC,CACmC,CACpC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChB,CAAC;IAEH,qBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+QChBD,2HAAQ,KACN,64BAA6B,MAC3B,mHAAI,sFAAS,MACb;;;;;;8hCAAoC,gFAAO,MAC3C;;;;;;giCAAwC,gFAAO,MAC/C,4IAAwB,KACxB,oIAA0B,KACxB,4PAA8C,YAAtB;;wBAAqB;MAA7C,wqBAA8C,IAC5C,mrBAAU,oFAAW,MAGzB,oIAA2B,mFAEzB,kQAAgD,YAAxB;;wBAAuB;MAA/C,wqBAAgD,IAC9C,mrBAAU,oFAAW,MAS3B,0MAEC,YAD8C;;wBAAiC;MADhF,gfAEC,MAWH,oJAA6B,KAC3B,2jBAAe,IAEf,sHAAG,8IAA4B,iDAtClB,yBAAe,EAA5B,YAA6B,EAAhB,SAAe,GAEvB,0BAAqB,EAAxB,YAAoC,EAAjC,SAAqB,GACrB,+BAAyB,EAA5B,aAAwC,EAArC,UAAyB,GAIxB,aAAU,GAMV,aAAU,GASM,oBAAwB,WAA9C,aAEC,EAFqB,UAAwB,GAc9C,aAAe,mDApCf,iOAA6B,GAE3B,koBAAoC,GACpC,qpBAAwC,GAElC,oBAAmB,WAAzB,aAA0B,EAApB,UAAmB,GACvB,wPAA8C,GAC5C,6GAAU,GAGR,qBAAoB,WAA1B,aAA2B,EAArB,UAAoB,GAAC,wDAEzB,2PAAgD,GAC9C,6GAAU,GAUM,qBAAwB,eAD9C,aAEC,EADqB,UAAwB,GAe3C,4MAA4B;;;;;;;;;;;;;;;;;ACrCjC;AAAA;IAAA;QAUE,aAAQ,GAAW,EAAE,CAAC;QACtB,iBAAY,GAAG,KAAK,CAAC;QAErB,QAAG,GAAS,IAAI,IAAI,EAAE,CAAC;QAgBvB,8BAA8B;QAC9B,EAAE;QACF,8CAA8C;QAC9C,8CAA8C;QAC9C,IAAI;IAEN,CAAC;IApBC,iCAAS,GAAT;QACE,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;IACzC,CAAC;IACD,mCAAW,GAAX;QACE,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC5B,CAAC;IACD,wCAAgB,GAAhB,UAAiB,IAAI;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC5B,CAAC;IAUH,oBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;AClC4D;AAG7D;IAKE,2BAAY,UAAsB;QAChC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED,sCAAU,GAAV;QAEE,MAAM,CAAC,IAAI,CAAC,UAAU;aACnB,GAAG,CAAW,sDAAsD,CAAC,CAKrE;IACL,CAAC;IAED,qCAAS,GAAT,UAAU,EAAU;QAClB,MAAM,CAAC,IAAI,CAAC,UAAU;aACnB,GAAG,CACF,uDAAuD,GAAG,EAAE,CAC7D,CAAC;IACN,CAAC;IAED,qCAAS,GAAT,UAAU,MAAc;QAEtB,IAAM,OAAO,GAAG;YACd,OAAO,EAAG,IAAI,gEAAW,CAAC;gBACxB,cAAc,EAAE,mCAAmC;aACpD,CAAC;SACH,CAAC;QAEF,IAAM,MAAM,GAAG,SAAO,MAAM,CAAC,GAAG,gBAAW,MAAM,CAAC,MAAQ,CAAC;QAE3D,MAAM,CAAC,IAAI,CAAC,UAAU;aACnB,IAAI,CACH,2DAA2D,EAC3D,MAAM,EACN,OAAO,CACR,CAAC;IAEN,CAAC;IAGH,wBAAC;AAAD,CAAC;;;;;;;;;;;;;;;AC/CD;AAAA;IAKE;QAFQ,aAAQ,GAAa,EAAE,CAAC;QAG9B,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,sCAAI,GAAZ;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IACnE,CAAC;IAEO,sCAAI,GAAZ;QACE,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAC,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,4CAAU,GAAV;QACE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,2CAAS,GAAT,UAAU,EAAU;QAClB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAG,IAAI,UAAG,CAAC,EAAE,KAAK,EAAE,EAAb,CAAa,CAAC,CAAC,CAAC;IACnE,CAAC;IAED,2CAAS,GAAT,UAAU,MAAc;QACtB,iEAAiE;QACjE,yDAAyD;QACzD,8CAA8C;QAC9C,aAAa;QACb,6FAA6F;QAC7F,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,EAAE,CAAC;QAEZ,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAGH,8BAAC;AAAD,CAAC;;;;;;;;;;;;;;;ACvCD;AAAA;IAKE;QAFQ,aAAQ,GAAa,EAAE,CAAC;QAG9B,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEO,iCAAI,GAAZ;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IACnE,CAAC;IAEO,iCAAI,GAAZ;QACE,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAC,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,uCAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,sCAAS,GAAT,UAAU,EAAU;QAClB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAG,IAAI,UAAG,CAAC,EAAE,KAAK,EAAE,EAAb,CAAa,CAAC,CAAC;IAClD,CAAC;IAED,sCAAS,GAAT,UAAU,MAAc;QACtB,iEAAiE;QACjE,yDAAyD;QACzD,8CAA8C;QAC9C,aAAa;QACb,6FAA6F;QAC7F,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAGH,yBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;ACvC+C;AAEW;AAG3D;IAME,2BAAY,IAAgB;QAFpB,QAAG,GAAW,qEAAW,CAAC,GAAG,CAAC;QAGpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,gBAAgB;IAChB,sCAAU,GAAV;QAAA,iBAMC;QALC,8BAA8B;QAC9B,MAAM,CAAC,IAAI,OAAO,CAAW,UAAC,OAAO,EAAE,MAAM;YAC3C,KAAI,CAAC,IAAI,CAAC,GAAG,CAAc,KAAI,CAAC,GAAG,aAAU,CAAC;iBAC3C,SAAS,CAAE,cAAI,IAAI,cAAO,CAAC,IAAI,CAAC,EAAb,CAAa,CAAE,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IACD,uCAAuC;IACvC,2DAA2D;IAC3D,IAAI;IACJ,qCAAS,GAAT,UAAU,MAAc;QAAxB,iBAIC;QAHC,MAAM,CAAC,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;YACvC,KAAI,CAAC,IAAI,CAAC,IAAI,CAAI,KAAI,CAAC,GAAG,kBAAe,EAAE,MAAM,CAAC,CAAC,SAAS,CAAC,aAAG,IAAI,cAAO,EAAE,EAAT,CAAS,EAAE,aAAG,IAAK,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qCAAS,GAAT,UAAU,EAAU;QAApB,iBAKC;QAJC,MAAM,CAAC,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;YACzC,KAAI,CAAC,IAAI,CAAC,GAAG,CAAY,KAAI,CAAC,GAAG,iBAAY,EAAI,CAAC;iBAC/C,SAAS,CAAE,cAAI,IAAI,cAAO,CAAC,IAAI,CAAC,EAAb,CAAa,CAAE,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;IAEH,wBAAC;AAAD,CAAC;;;;;;;;;;;;;;;ACzCD;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,GAAG,EAAE,0CAA0C;CAChD,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;;;;;ACfpB;AAIU;;;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,2EAAwB,uBAAgB,8EAAW;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import {BrowserModule} from '@angular/platform-browser';\nimport {LOCALE_ID, NgModule} from '@angular/core';\n\nimport {BanqueHttpService} from './services/banque-http.service';\nimport {BanqueLocalService} from './services/banque-local.service';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {CapitalizePipe} from './pipes/capitalize.pipe';\nimport {ClientFormComponent} from './client-form/client-form.component';\nimport {ClientsComponent} from './clients/clients.component';\nimport {FormsModule} from '@angular/forms';\nimport {MaterialModule} from './material.module';\nimport {RootComponent} from './root/root.component';\nimport {RouterModule} from '@angular/router';\nimport {ROUTES} from './app.routes';\nimport {BanqueRestService} from './services/banque-rest.service';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ClientComponent} from './client/client.component';\nimport {BanqueLocalAsyncService} from './services/banque-local-async.service';\nimport {AuthentificationComponent} from './authentification/authentification.component';\nimport {CommonModule, registerLocaleData} from '@angular/common';\nimport localeFr from '@angular/common/locales/fr';\n\n// registerLocaleData(localeFr, 'fr');\n\n@NgModule({\n  declarations: [\n    RootComponent,\n    ClientsComponent,\n    ClientFormComponent,\n    ClientComponent,\n    CapitalizePipe,\n    AuthentificationComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    RouterModule.forRoot(ROUTES),\n    MaterialModule\n  ],\n  providers: [\n//    { provide: LOCALE_ID, useValue: 'fr' },\n    BanqueLocalService,\n    BanqueLocalAsyncService,\n    BanqueHttpService,\n    BanqueRestService\n  ],\n  bootstrap: [RootComponent]\n})\nexport class AppModule { }\n","export class AuthModel {\r\n  constructor(\r\n    public identifiant: string,\r\n    public motdepasse: string\r\n  ) {}\r\n}\r\n","<form (submit)=\"onSubmit()\" #authForm=\"ngForm\">\n  <mat-form-field>\n    <input matInput name=\"identifiant\" placeholder=\"Identifiant\" [(ngModel)]=\"model.identifiant\" required>\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput name=\"motdepasse\" placeholder=\"Mot de passe\" [(ngModel)]=\"model.motdepasse\" required>\n  </mat-form-field>\n  <button mat-mini-fab color=\"accent\" type=\"submit\" [disabled]=\"!authForm.form.valid\"><mat-icon>done</mat-icon></button>\n</form>\n\n<!--\n<p (click)=\"action()\">{{identifiant}}</p>\n-->\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AuthModel} from './auth-model';\n\n@Component({\n  selector: 'app-authentification',\n  templateUrl: './authentification.component.html',\n  styleUrls: ['./authentification.component.css']\n})\nexport class AuthentificationComponent implements OnInit {\n\n  @Input()\n  identifiant: string;\n\n  @Output()\n  auth: EventEmitter<string> = new EventEmitter<string>();\n\n  model: AuthModel;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.model = new AuthModel(this.identifiant, '');\n  }\n  onSubmit() {\n    if (this.model.identifiant !== ''\n      && this.model.identifiant === this.model.motdepasse) {\n      this.auth.emit(this.model.identifiant);\n    }\n  }\n\n//   @Input()\n//   identifiant = 'inconnu';\n//\n//   @Output()\n//   identifiantChange: EventEmitter<string> = new EventEmitter<string>();\n//\n//   constructor() { }\n//\n//   action() {\n// //    alert(`clic sur ${this.identifiant}`);\n//     this.identifiant += ' clic';\n//     this.identifiantChange.emit(this.identifiant);\n//   }\n//\n//   ngOnInit() {\n//   }\n\n}\n","<h2>Nouveau client</h2>\n<form (submit)=\"enregistrer()\" #clientForm=\"ngForm\">\n  <label for=\"champ-nom\">Nom</label>\n  <input id=\"champ-nom\" #champNom=\"ngModel\" name=\"nom\" required [(ngModel)]=\"client.nom\"\n    [class]=\"champNom.invalid?'erreur':''\"\n  />\n\n  <br/>\n  <label for=\"champ-prenom\" >Prénom</label>\n  <input id=\"champ-prenom\" #champPrenom=\"ngModel\" name=\"prenom\" [(ngModel)]=\"client.prenom\" pattern=\"[a-zA-Z]{3,}\" />\n  <span [hidden]=\"champPrenom.valid\">Le prénom doit contenir 3 lettres au minimum</span>\n  <br/>\n  <button type=\"submit\" [disabled]=\"clientForm.invalid\">Enregistrer</button>\n</form>\n\n\n\n<!--\n<form (submit)=\"enregistrer()\">\n  <mat-form-field>\n    <input matInput placeholder=\"Saisir votre nom\" required [formControl]=\"nommd\"><!- [formControl]=\"nommd\"  ->\n    <mat-error [hidden]=\"nommd.invalid\" >Le nom est obligatoire.</mat-error><!- *ngIf=\"nommd.invalid\" ->\n  </mat-form-field>\n  <button mat-button type=\"submit\" >Enregistrer</button>\n</form>\n<form (submit)=\"enregistrer()\" #formClient=\"ngForm\">\n  <label for=\"nom\">Nom</label>\n  <input id=\"nom\" name=\"nom\"  #inputNom=\"ngModel\" required [(ngModel)]=\"client.nom\" />\n  <span [hidden]=\"!(inputNom.touched && inputNom.invalid)\" >Le nom est obligatoire.</span>\n  <br/>\n  <label for=\"prenom\">Prénom</label>\n  <input id=\"prenom\" name=\"prenom\" #inputPrenom=\"ngModel\" [(ngModel)]=\"client.prenom\" />\n  <br/>\n  <button mat-button type=\"submit\" [disabled]=\"formClient.invalid\">Enregistrer</button>\n</form>\n<pre>{{ client | json }}</pre>\n-->\n","import { Component, OnInit } from '@angular/core';\nimport { Client } from '../model/client';\nimport { Router } from '@angular/router';\nimport { BanqueHttpService } from '../services/banque-http.service';\nimport {BanqueAsyncService} from '../services/banque-async.service';\nimport {BanqueRestService} from '../services/banque-rest.service';\n\n@Component({\n  selector: 'app-client-form',\n  templateUrl: './client-form.component.html',\n  styleUrls: ['./client-form.component.css']\n})\nexport class ClientFormComponent implements OnInit {\n\n  private router: Router;\n  private dataService: BanqueAsyncService;\n\n  client = new Client();\n\n  constructor(dataService: BanqueRestService, router: Router) {\n    this.dataService = dataService;\n    this.router = router;\n  }\n\n  enregistrer() {\n    this.dataService.addClient(this.client).then(\n      () => this.router.navigate(['/clients'])\n      // () => this.router.navigate([ROUTE_LISTE_CLIENTS])\n    );\n    // this.router.navigate(['/clients']);\n  }\n\n  ngOnInit() {\n\n  }\n\n}\n","<h2>{{client.prenom | capitalize}} {{client.nom | uppercase}}</h2>\n<mat-list >\n  <mat-list-item *ngFor=\"let cpt of client.comptes\">\n    {{cpt.numero}} {{cpt.intitule}}\n    <span *ngIf=\"cpt.operations && cpt.operations.length != 0; else pasOperation\" >\n      ({{cpt.operations.length}} opérations)\n    </span>\n    <ng-template #pasOperation>\n      <span>Aucune opération.</span>\n    </ng-template>\n  </mat-list-item>\n</mat-list>\n","import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Client} from '../model/client';\nimport {BanqueHttpService} from '../services/banque-http.service';\nimport {BanqueAsyncService} from '../services/banque-async.service';\nimport {BanqueRestService} from '../services/banque-rest.service';\n\n@Component({\n  selector: 'app-client',\n  templateUrl: './client.component.html',\n  styleUrls: ['./client.component.css']\n})\nexport class ClientComponent implements OnInit {\n\n  private route: ActivatedRoute;\n  private dataService: BanqueAsyncService;\n\n  client: Client = new Client();\n\n  constructor(dataService: BanqueRestService, route: ActivatedRoute) {\n    this.dataService = dataService;\n    this.route = route;\n  }\n\n  ngOnInit() {\n    const id = parseInt(this.route.snapshot.params['id'], 10);\n    this.dataService.getClient(id)\n      .then( client => this.client = client );\n    // this.client = this.dataService.getClient(id);\n  }\n\n}\n","<h2 i18n=\"@@clientsCmpTitre\" >Liste des clients</h2>\n<mat-nav-list>\n  <a mat-list-item [routerLink]='[\"/client\",cli.id]' *ngFor=\"let cli of clients | slice:0:100\" >\n    {{cli.prenom | titlecase }} {{cli.nom | uppercase }}&nbsp;\n    <span *ngIf=\"cli.comptes && cli.comptes.length != 0\"> ({{cli.comptes.length}} comptes)</span>\n  </a>\n</mat-nav-list>\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {Client} from '../model/client';\nimport {FormControl, Validators} from '@angular/forms';\nimport {BanqueService} from '../services/banque.service';\nimport {BanqueRestService} from '../services/banque-rest.service';\nimport {BanqueAsyncService} from '../services/banque-async.service';\nimport {BanqueLocalAsyncService} from '../services/banque-local-async.service';\nimport {BanqueLocalService} from '../services/banque-local.service';\n\n@Component({\n  selector: 'app-clients',\n  templateUrl: './clients.component.html',\n  styleUrls: ['./clients.component.css']\n})\nexport class ClientsComponent implements OnInit, AfterViewInit {\n\n  private dataService: BanqueAsyncService;\n\n  // clients: Array;\n  // clients: Object[];\n  // clients: Array<Client>;\n  clients: Client[] = [];\n\n  client: Client;\n\n  nommd = new FormControl('', [Validators.required, Validators.email]);\n\n  constructor(dataService: BanqueRestService) {\n    this.dataService = dataService;\n    this.clients = [];\n  }\n\n\n  ngOnInit() {\n    console.log('clients onInit()');\n    this.dataService.getClients().then( data => this.clients = data );\n  }\n\n  // Rechargement de la liste à chaque affichage du  composant\n  ngAfterViewInit() {\n    console.log('clients onAfterViewInit()');\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport * as md from '@angular/material';\n\n@NgModule({\n  imports: [\n    md.MatBadgeModule,\n    md.MatButtonModule,\n    md.MatFormFieldModule,\n    md.MatIconModule,\n    md.MatInputModule,\n    md.MatListModule,\n    md.MatToolbarModule\n  ],\n  exports: [\n    md.MatBadgeModule,\n    md.MatButtonModule,\n    md.MatFormFieldModule,\n    md.MatIconModule,\n    md.MatInputModule,\n    md.MatListModule,\n    md.MatToolbarModule\n  ],\n  declarations: []\n})\nexport class MaterialModule { }\n","import {Compte} from './compte';\r\n\r\nexport class Client {\r\n\r\n  id: number;\r\n  nom = '';\r\n  prenom = '';\r\n\r\n  comptes: Compte[] = [];\r\n\r\n  constructor() {\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'capitalize'\n})\nexport class CapitalizePipe implements PipeTransform {\n\n  transform(value: string): string {\n    return value\n      .split('-')\n      .map( prenom =>\n        prenom.charAt(0).toUpperCase()\n        + prenom.substring(1).toLowerCase()\n      ).join('-');\n  }\n\n}\n","<header>\n  <mat-toolbar color=\"primary\">\n    <h1>Ma Banque</h1>\n    <a routerLink=\"/clients\" mat-button>Clients</a>\n    <a routerLink=\"/client/form\" mat-button>Nouveau</a>\n    <span class=\"fill-flex\"></span>\n    <span [hidden]=\"username\">\n      <button mat-icon-button (click)=\"connexion()\">\n        <mat-icon>fingerprint</mat-icon>\n      </button>\n    </span>\n    <span [hidden]=\"!username\">\n      {{username}}\n      <button mat-icon-button (click)=\"deconnexion()\">\n        <mat-icon>exit_to_app</mat-icon>\n      </button>\n    </span>\n    <!--    <span class=\"fill-flex\"></span>\n        <span (click)=\"deconnexion()\">{{username}}</span>\n        <button mat-icon-button (click)=\"connexion()\" [hidden]=\"username\">\n          <mat-icon>fingerprint</mat-icon>\n        </button> -->\n  </mat-toolbar>\n  <app-authentification [identifiant]=\"username\"\n                        [hidden]=\"!showAuthForm\" (auth)=\"authentification($event)\"\n  ></app-authentification>\n<!--\n  <app-authentification (changement)=\"recupererIdentifiant($event)\" ></app-authentification>\n  <app-authentification identifiant=\"toto\" ></app-authentification>\n  <app-authentification [(identifiant)]=\"utilisateur\" ></app-authentification>\n  <app-authentification [identifiant]=\"username\"\n                        [hidden]=\"!showAuthForm\" (auth)=\"authentification($event)\"\n  ></app-authentification>\n  <p>{{utilisateur}}</p>\n  <input [(ngModel)]=\"utilisateur\" />-->\n</header>\n<main class=\"mat-typography\">\n  <router-outlet></router-outlet>\n\n  <p>{{ajd | date:'d MMMM yyyy'}}</p>\n</main>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root', // <app-root ></app-root>\n  templateUrl: './root.component.html',\n  // template: `\n  //   <h1>Mon application {{title}}</h1>\n  //   <p></p>\n  // `,\n  styleUrls: ['./root.component.css']\n})\nexport class RootComponent {\n  username: string = '';\n  showAuthForm = false;\n\n  ajd: Date = new Date();\n\n  connexion() {\n    this.showAuthForm = !this.showAuthForm;\n  }\n  deconnexion() {\n    this.username = '';\n    this.showAuthForm = false;\n  }\n  authentification(user) {\n    this.username = user;\n    this.showAuthForm = false;\n  }\n\n\n\n  // utilisateur = 'quelqu\\'un';\n  //\n  // recupererIdentifiant(identifiant: string) {\n  //   alert(`${identifiant}, bien reçu merci`);\n  // }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Client } from '../model/client';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\n\n@Injectable()\nexport class BanqueHttpService {\n\n  private httpClient: HttpClient;\n\n  constructor(httpClient: HttpClient) {\n    this.httpClient = httpClient;\n  }\n\n  getClients(): Observable<Client[]> {\n\n    return this.httpClient\n      .get<Client[]>('http://wildfly.westeurope.cloudapp.azure.com/clients')\n      // .pipe(\n      //   retry(3), // 3 tentatives\n      //   catchError( error => error.error.message)\n      // )\n      ;\n  }\n\n  getClient(id: number): Observable<Client> {\n    return this.httpClient\n      .get<Client>(\n        'http://wildfly.westeurope.cloudapp.azure.com/clients/' + id\n      );\n  }\n\n  addClient(client: Client): Observable<Client[]> {\n\n    const options = {\n      headers : new HttpHeaders({\n        'Content-Type': 'application/x-www-form-urlencoded'\n      })\n    };\n\n    const params = `nom=${client.nom}&prenom=${client.prenom}`;\n\n    return this.httpClient\n      .post<Client[]>(\n        'http://wildfly.westeurope.cloudapp.azure.com/clients/post',\n        params,\n        options\n      );\n\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Client } from '../model/client';\nimport {BanqueService} from './banque.service';\nimport {BanqueAsyncService} from './banque-async.service';\n\n@Injectable()\nexport class BanqueLocalAsyncService implements BanqueAsyncService {\n\n  private _clients: Client[] = [];\n\n  constructor() {\n    this.load();\n  }\n\n  private load(): void {\n    this._clients = JSON.parse(localStorage.getItem('data')).clients;\n  }\n\n  private save(): void {\n    localStorage.setItem('data', JSON.stringify({clients: this._clients}));\n  }\n\n  getClients(): Promise<Client[]> {\n    return Promise.resolve(this._clients);\n  }\n\n  getClient(id: number): Promise<Client> {\n    return Promise.resolve(this._clients.find(cli => cli.id === id));\n  }\n\n  addClient(client: Client): Promise<void> {\n    // client.id = Math.max(...this._clients.map(cli => cli.id)) + 1;\n    // client.id = this._clients.reduce(function(cli1, cli2){\n    //     return cli1.id > cli2.id ? cli1 : cli2;\n    // }).id + 1;\n    // client.id = this._clients.reduce((cli1, cli2) =>  cli1.id > cli2.id ? cli1 : cli2).id + 1;\n    this._clients.push(client);\n    this.save();\n\n    return Promise.resolve();\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Client } from '../model/client';\nimport {BanqueService} from './banque.service';\n\n@Injectable()\nexport class BanqueLocalService implements BanqueService {\n\n  private _clients: Client[] = [];\n\n  constructor() {\n    this.load();\n  }\n\n  private load(): void {\n    this._clients = JSON.parse(localStorage.getItem('data')).clients;\n  }\n\n  private save(): void {\n    localStorage.setItem('data', JSON.stringify({clients: this._clients}));\n  }\n\n  getClients(): Client[] {\n    return this._clients;\n  }\n\n  getClient(id: number): Client {\n    return this._clients.find(cli => cli.id === id);\n  }\n\n  addClient(client: Client): void {\n    // client.id = Math.max(...this._clients.map(cli => cli.id)) + 1;\n    // client.id = this._clients.reduce(function(cli1, cli2){\n    //     return cli1.id > cli2.id ? cli1 : cli2;\n    // }).id + 1;\n    // client.id = this._clients.reduce((cli1, cli2) =>  cli1.id > cli2.id ? cli1 : cli2).id + 1;\n    this._clients.push(client);\n    this.save();\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport {BanqueService} from './banque.service';\nimport {HttpClient} from '@angular/common/http';\nimport {Client} from '../model/client';\nimport {environment} from '../../environments/environment';\nimport {BanqueAsyncService} from './banque-async.service';\n\n@Injectable()\nexport class BanqueRestService implements BanqueAsyncService {\n\n  private http: HttpClient;\n  private api: string = environment.api;\n\n  constructor(http: HttpClient) {\n    this.http = http;\n  }\n\n  // ES6 : Promise\n  getClients(): Promise<Client[]> {\n    // let clients: Client[] = [];\n    return new Promise<Client[]>((resolve, reject) => {\n      this.http.get<Client[]>(`${this.api}/clients`)\n        .subscribe( data => resolve(data) );\n    });\n  }\n  // getClients(): Observable<Client[]> {\n  //   return this.http.get<Client[]>(`${this.api}/clients`);\n  // }\n  addClient(client: Client): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.post(`${this.api}/clients/post`, client).subscribe(res => resolve(), err => {});\n    });\n  }\n\n  getClient(id: number): Promise<Client> {\n    return new Promise<Client>((resolve, reject) => {\n      this.http.get<Client>(`${this.api}/clients/${id}`)\n        .subscribe( data => resolve(data) );\n    });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  api: 'https://banque-api.azurewebsites.net/api'\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}